---
export interface Props {
  href: string;
  variant?: 'primary' | 'secondary' | 'accent';
  size?: 'sm' | 'md' | 'lg';
  external?: boolean;
  children: string;
}

const { 
  href, 
  variant = 'primary', 
  size = 'md', 
  external = false,
  children 
} = Astro.props;

const baseClasses = "inline-flex items-center justify-center font-semibold rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2";
const sizeClasses = {
  sm: "px-4 py-2 text-sm",
  md: "px-6 py-3 text-base",
  lg: "px-8 py-4 text-lg"
};
const variantClasses = {
  primary: "bg-primary-600 hover:bg-primary-700 text-white focus:ring-primary-500",
  secondary: "bg-white hover:bg-neutral-50 text-primary-600 border border-primary-600 focus:ring-primary-500",
  accent: "bg-accent-500 hover:bg-accent-700 text-white focus:ring-accent-500"
};

const classes = `${baseClasses} ${sizeClasses[size]} ${variantClasses[variant]}`;
---

<a 
  href={href}
  class={classes}
  {external}
  target={external ? "_blank" : undefined}
  rel={external ? "noopener noreferrer" : undefined}
>
  {children}
  {external && (
    <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
    </svg>
  )}
</a>
